package main

import (
	"flag"
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"os"
	"path/filepath"
	"strings"
	"text/template"

	"github.com/iancoleman/strcase"
)

func main() {
	var packagePath string
	var dialect string
	flag.StringVar(&packagePath, "package", ".", "path to the package to generate the httphandler for")
	flag.Parse()

	generate(dialect, packagePath)
}

const ModelAnnotation = "@httphandler"

func generateForFile(dialect string, filePath string) {
	inputFilePath, err := filepath.Abs(filePath)
	if err != nil {
		panic(err)
	}

	pathList := filepath.SplitList(inputFilePath)
	pathList = pathList[:len(pathList)-1]
	fileDir := filepath.Join(pathList...)
	fileSet := token.NewFileSet()
	fileAst, err := parser.ParseFile(fileSet, filePath, nil, parser.ParseComments)
	if err != nil {
		panic(err)
	}

	actualName := strings.TrimSuffix(filePath, filepath.Ext(filePath))
	outputFilePath := filepath.Join(fileDir, fmt.Sprintf("%s_model_gen.go", actualName))
	outputFile, err := os.Create(outputFilePath)
	if err != nil {
		panic(err)
	}
	defer func(outputFile *os.File) {
		err := outputFile.Close()
		if err != nil {
			fmt.Println(err)
		}
	}(outputFile)

	var notEmpty bool

	for _, decl := range fileAst.Decls {
		funcDecl, ok := decl.(*ast.FuncDecl)
		if !ok {
			continue
		}
	}
	if !notEmpty {
		os.Remove(outputFilePath)
	}
}

func generate(dialect string, packagePath string) {
	err := filepath.Walk(packagePath, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if !info.IsDir() && strings.HasSuffix(info.Name(), ".go") && !strings.Contains(info.Name(), "_gen") {
			generateForFile(dialect, path)
		}
		return nil
	})
	if err != nil {
		panic(err)
	}
}

var funcMap = template.FuncMap{
	"toSnakeCase": func(name string) string {
		return strcase.ToSnake(name)
	},
	"ToLowerCamelCase": func(name string) string {
		return strcase.ToLowerCamel(name)
	},
}

type templateData struct {
	Pkg string
}

var tmpl = template.Must(template.New("httphandlergen").Funcs(funcMap).Parse(
	`// Code generated by httphandlergen. DO NOT EDIT
package {{ .Pkg }}

import (
    "fmt"
    "strings"
    "database/sql"
)
	
`,
))
